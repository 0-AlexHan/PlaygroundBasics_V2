import Foundation
/*:
# –ó–∞–º—ã–∫–∞–Ω–∏—è

 –ù–∞ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã —É–∑–Ω–∞–µ—à—å:
- —á—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏—è  (`—Ålosure`)
- —á—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–º—ã–∫–∞—é—â–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
- —á—Ç–æ —Ç–∞–∫–æ–µ –∑–∞—Ö–≤–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è
- —á—Ç–æ —Ç–∞–∫–æ–µ —Å–±–µ–≥–∞—é—â–∏–µ –∑–∞–º—ã–∫–∞–Ω–∏—è

–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏:
- [–ó–∞–º—ã–∫–∞–Ω–∏—è](https://docs.swift.org/swift-book/LanguageGuide/Closures.html)
- [–ó–∞—Ö–≤–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–π](https://www.swiftbysundell.com/articles/swifts-closure-capturing-mechanics/)
 
–ó–∞–∫—Ä–µ–ø–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:

#### –ó–∞–¥–∞–Ω–∏–µ 1
 
 - –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é _applyKTimes_, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ _k_ –∏ –∑–∞–º—ã–∫–∞–Ω–∏–µ.
 - –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–º—ã–∫–∞–Ω–∏–µ _k_ —Ä–∞–∑.
 - –í –∑–∞–º—ã–∫–∞–Ω–∏–∏ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É.
 - Note: üëÜ _–ó–∞–º—ã–∫–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å._
 */
/*:
 - Example: üòâ\
 _Function Call:_\
 applyKTimes(3) {\
 print("We ‚ù§Ô∏è Swift")\
 }\
 _Output:_\
 We ‚ù§Ô∏è Swift\
 We ‚ù§Ô∏è Swift\
 We ‚ù§Ô∏è Swift
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:

func applyKTimes(k: Int, closureTime: () -> Void) {
    for _ in 0 ..< k {
        closureTime()
    }
}

applyKTimes(k: 4) {
    print("We ‚ù§Ô∏è Swift")
}

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 2
 - –û–±—å—è–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é _numbers_, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â—É—é —Å–æ–±–æ–π –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ü—Ä–æ–∏—Ü–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –ª—é–±—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:

var numbers = [2, 35, 1, 2, 11, 5, 4, 7]

/*:
 - –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ _multiples_, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö –∫—Ä–∞—Ç–Ω—ã—Ö 3 —á–∏—Å–µ–ª –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
 - –í—ã–≤–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ –∫–æ–Ω—Å–æ–ª—å. –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å - _No data_.
 - Note: üëÜ _–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥ `filter`._
 */
/*:
 - Example: üòâ\
 _Input:_\
 var numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\
 _Output:_\
 multiples = [3, 6, 9, 3, 12]
 */
/*:
 - Example: üòâ\
 _Input:_\
 var numbers = [1, 2, 10]\
 _Output:_\
 No data
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:

let multiples = numbers.filter({ $0 % 3 == 0 })
print(multiples.isEmpty ? "No data" : multiples)
/*:
 - –ù–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ _numbers_ –∏ –≤—ã–≤–µ–¥–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
 - Note: üëÜ _–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥ `reduce`._
 */
/*:
 - Example: üòâ\
 _Input:_\
 numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\
 _Output:_\
 Max: 12
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
let highest = numbers.reduce(Int.min, {
    if $0 > $1 {
        return $0
    } else {
        return $1
    }
})
print(highest)
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 3
 -  –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫–∏—é _forEach_, –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ –∑–∞–º—ã–∫–∞–Ω–∏–µ.
 - –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å –∑–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.
 - Example: üòâ\
 _Function Input:_\
 forEach([1, 2, 3, 4]) {\
 print($0 + 1)\
 }\
 _Output:_\
 2\
 3\
 4\
 5
 */

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:

func forEach(array: [Int], increment: (Int) -> Void) {
    for each in array {
        increment(each)
    }
}

forEach(array: numbers) {
    print($0 + 1)
}
/*:
---
### –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å:
#### –ó–∞–¥–∞–Ω–∏–µ 4:
 - –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
*/
/*:
- Note: üëÜ _–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ - —ç—Ç–æ –≥—Ä–∞–Ω–∏—Ü—ã —á–∏—Å–ª–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç—Å—É—Ç—Å–≤—É—é—â–∏—Ö —á–∏—Å–µ–ª_
*/
/*:
- Example: üòâ\
_Function Call:_\
sumOfMissingNumbers([1, 3, 5, 7, 10])\
_Output:_\
Sum of missing numbers = 29
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 5:
 - –°–æ–∑–¥–∞–π 2D –º–∞—Å—Å–∏–≤,  —Å–æ—Å—Ç–æ—è—é—â–∏–π –∏–∑ —á–∏—Å–µ–ª 1 –∏ 0.
 - –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ ( –∑–∞–º–µ–Ω–∏ 1 –Ω–∞ 0 –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç).
 - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
*/
/*:
- Example: üòâ\
_Function Call:_\
reverseImage([\
 [1, 0, 0], \
 [0, 1, 0], \
 [0, 0, 1], \
 ])\
_Output:_\
 [ \
   [0, 1, 1], \
   [1, 0, 1], \
   [1, 1, 0] \
 ] 
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:


let array2D: [[Int]] = [[1, 0, 0],
                        [0, 1, 0],
                        [0, 0, 1]].map { $0.map { 1 - $0 } }

array2D.forEach { (print2D) in
    print(print2D)
}



/*:
---
## –ó–∞–¥–∞–Ω–∏–µ 6:
 - –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
 - –í —Ç–µ–ª–µ —Ñ—É–∫–Ω—Ü–∏–∏ –≤—ã–≤–µ–¥–∏ —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å "This is function"
 - –í –∑–∞–º—ã–∫–∞–Ω–∏–∏ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–≥—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É "This is closure"
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:

func fooWith(closure: () -> Void) {
    print("This is function")
    closure()
}

fooWith {
    print("This is closure")
}
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 7:
 - –£–ø—Ä–æ—Å—Ç–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:

var animals = ["fish", "cat", "chicken", "dog"].sorted(by: <)
print(animals)
//: [–ù–∞–∑–∞–¥: –§—É–Ω–∫—Ü–∏–∏](@previous)  |  –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7  |  [–í–ø–µ—Ä–µ–¥: –ö–æ—Ä—Ç–µ–∂–∏, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã](@next)
